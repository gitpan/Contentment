.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Contentment::FileType 3"
.TH Contentment::FileType 3 "2006-01-28" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Contentment::FileType \- Contract all filetype plugins must adhere to
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The filetype plugins are used to determine a few important bits of information about \s-1VFS\s0 files in Contentment:
.IP "1." 4
What kind of file is this?
.IP "2." 4
What kind of file do I get when it is generated?
.IP "3." 4
Are there any additional properties stored within this file's meetadata? What are they?
.IP "4." 4
How do I generate this file?
.Sh "\s-1FILE\s0 \s-1KIND\s0"
.IX Subsection "FILE KIND"
.IP "$preference = Contentment::FileType::TYPE\->filetype_match($file)" 4
.IX Item "$preference = Contentment::FileType::TYPE->filetype_match($file)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`filetype_match\*(C'\fR. This method accepts a single argument, the \s-1VFS\s0 file to be checked. This method returns a numeric value. A return of zero indicates that this filetype plugin is unable to identify the filetype and should not be used. A return of one or greater indicates that this plugin is able to identify the filetype. Filetypes that return greater return values are preferred to those with lesser return values.
.IP "$kind = Contentment::FileType::TYPE\->real_kind($file)" 4
.IX Item "$kind = Contentment::FileType::TYPE->real_kind($file)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`real_kind\*(C'\fR. This method accepts a single argument, the \s-1VFS\s0 file to be checked. This method returns a string containing the name of the kind this file has in the \s-1VFS\s0. This is the kind of file we would see if we simply read it's content from the disk. There is no required format for the name, but \s-1MIME\s0 types provide a common and simple starting point.
.Sh "\s-1GENERATED\s0 \s-1KIND\s0"
.IX Subsection "GENERATED KIND"
.ie n .IP "$kind = Contentment::FileType::TYPE\->generated_kind($file, @args)" 4
.el .IP "$kind = Contentment::FileType::TYPE\->generated_kind($file, \f(CW@args\fR)" 4
.IX Item "$kind = Contentment::FileType::TYPE->generated_kind($file, @args)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`generated_kind\*(C'\fR. This method accepts at least a single argument, the \s-1VFS\s0 file to be checked. This method returns a string containing the name of the kind of file that will be generated if the \f(CW\*(C`generate\*(C'\fR method were called with this file and the exact same arguments \f(CW@args\fR. There is no required format for the name, but \s-1MIME\s0 types provide a common and simple starting point. 
.Sp
It is possible for this method to return \f(CW\*(C`undef\*(C'\fR, if no actual output is generated\-\-\-i.e., as is the case if and only if a file is generated for the result from the \f(CW\*(C`generate\*(C'\fR method only and gives no output. If a method gives output, its kind should be given as a defined value, e.g., \f(CW"unknown"\fR.
.Sh "\s-1PROPERTIES\s0"
.IX Subsection "PROPERTIES"
.IP "@property_keys = Contentment::FileType::TYPE\->properties($file)" 4
.IX Item "@property_keys = Contentment::FileType::TYPE->properties($file)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`properties\*(C'\fR. This method accepts a single argument, the \s-1VFS\s0 file to be checked. This method returns a list of strings containing the names of all metadata properties that can be found within the file.
.ie n .IP "$value = Contentment::FileType::TYPE\->get_property($file, $key)" 4
.el .IP "$value = Contentment::FileType::TYPE\->get_property($file, \f(CW$key\fR)" 4
.IX Item "$value = Contentment::FileType::TYPE->get_property($file, $key)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`get_property\*(C'\fR. This method accepts a two arguments, the \s-1VFS\s0 file to be checked and the name of a key to retrive. If there is a metadata value for the given file and key, then its value should be returned. Otherwise, the method should return \f(CW\*(C`undef\*(C'\fR.
.Sh "\s-1GENERATION\s0"
.IX Subsection "GENERATION"
.ie n .IP "$headers = Contentment::FileType::TYPE\->generate_headers($file, @args)" 4
.el .IP "$headers = Contentment::FileType::TYPE\->generate_headers($file, \f(CW@args\fR)" 4
.IX Item "$headers = Contentment::FileType::TYPE->generate_headers($file, @args)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`generate_headers\*(C'\fR. This method accepts at least one argument, the \s-1VFS\s0 file to be checked. Any additional arguments may be used by the generated to alter the generation process or be passed on to the file while running, if the file is a script or something similar.
.Sp
This method is called when this generator is to be given the opportunity to set \s-1HTTP\s0 headers on the request. This may or may not be followed by a call to \f(CW\*(C`generate\*(C'\fR, as it might be that no content is required (such as is the case with an \s-1HTTP\s0 \s-1HEAD\s0 request).
.Sp
This method is expected to return a reference to a hash, where each key is the name of a header to set and each value is the value to give that header.
.ie n .IP "$result = Contentment::FileType::TYPE\->generate($file, @args)" 4
.el .IP "$result = Contentment::FileType::TYPE\->generate($file, \f(CW@args\fR)" 4
.IX Item "$result = Contentment::FileType::TYPE->generate($file, @args)"
The filetype plugin \s-1MUST\s0 provide a method named \f(CW\*(C`generate\*(C'\fR. This method accepts at least one argument, the \s-1VFS\s0 file to be checked. Any additional arguments may be used by the generator to alter the generation process or be passed on to the file while running if the file is a script or something similar.
.Sp
Generation itself will involve the \f(CW\*(C`STDOUT\*(C'\fR file handle. The actual data generated will be sent to \f(CW\*(C`STDOUT\*(C'\fR. It may be that a generator expects some file input as well. In this case, the generator may read from \f(CW\*(C`STDIN\*(C'\fR to capture any input found there. Obviously, it is necessary when generating a file to redirect the input and output streams prior to generation. Contentment provides facilities to do this.
.Sp
Finally, the generate function may return a value. The format for the return value is not defined and can be anything.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Contentment::FileType::Other is a good base class for filetype plugins.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Sterling Hanenkamp, <hanenkamp@users.hanenkamp.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 Andrew Sterling Hanenkamp. All Rights Reserved.
.PP
Contentment is licensed and distributed under the same terms as Perl itself.
