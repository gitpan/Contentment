.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Contentment::Hooks 3"
.TH Contentment::Hooks 3 "2006-01-28" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Contentment::Hooks \- Runs the Contentment hook system
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Contentment::Hooks;
.Ve
.PP
.Vb 7
\&  # register Foo:bar() for hook 'foo' with order weight 50.
\&  Contentment::Hooks->register(
\&          hook  => 'foo', 
\&          name  => 'Foo',
\&          code  => \e&Foo::bar, 
\&          order => 50,
\&  );
.Ve
.PP
.Vb 2
\&  # register Foo::baz() for hook 'foo' with default priority
\&  Contentment::Hooks->register(hook => 'foo', code => \e&Foo::baz);
.Ve
.PP
.Vb 2
\&  # run the 'foo' hook with the given arguments
\&  Contentment::Hooks->call('foo', 0, foo => 7);
.Ve
.PP
.Vb 4
\&  # This would call:
\&  #   &Foo::baz(0, foo => 7);
\&  #   &Foo::bar(0, foo => 7);
\&  # Default priority = 0 and lower order weights run first.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Contentment depends heavily upon the hook system to allow each aspect of the system to be overridden by one or more plugins providing features to the system. These plugins register themselves with the hooks they wish to be dropped into and then those registered bits of code are run when the named hook is.
.Sh "\s-1HOOK\s0 \s-1API\s0"
.IX Subsection "HOOK API"
.IP "Contentment::Hook\->register(%args)" 4
.IX Item "Contentment::Hook->register(%args)"
This registers a handler for a hook. All arguments are passed in a hash:
.RS 4
.IP "hook (required)" 4
.IX Item "hook (required)"
The name of the hook the handler is registering for.
.IP "code (required)" 4
.IX Item "code (required)"
The subroutine that will handle the hook.
.IP "order (optional: defaults to 0)" 4
.IX Item "order (optional: defaults to 0)"
The order weight the handler should have. Lower numbers will be run first and higher numbers will be run last. It's recommended that these values be kept between \-99 and 99.
.IP "name (optional)" 4
.IX Item "name (optional)"
Some hooks require names to be used so that each name can be handled differently. How the names are used will depend upon the hook, so see the documentation for the hook for details.
.IP "id (optional)" 4
.IX Item "id (optional)"
In some cases, it is desirable to unregister a hook handler. By passing this id, it can be passed to the \f(CW\*(C`unregister\*(C'\fR method to remove this hook. If no id is given, one will be assigned.
.ie n .IP "Contentment::Hook\->unregister($hook, $id)" 4
.el .IP "Contentment::Hook\->unregister($hook, \f(CW$id\fR)" 4
.IX Item "Contentment::Hook->unregister($hook, $id)"
Removed the hook handler for hook \f(CW$hook\fR registered with id \f(CW$id\fR.
.IP "Contentment::Hook\->count($hook)" 4
.IX Item "Contentment::Hook->count($hook)"
Count the number of registered hooks for the hook \f(CW$hook\fR.
.ie n .IP "Contentment::Hook\->count_named($hook, $name)" 4
.el .IP "Contentment::Hook\->count_named($hook, \f(CW$name\fR)" 4
.IX Item "Contentment::Hook->count_named($hook, $name)"
Count the number of registered hooks for the hook \f(CW$hook\fR named \f(CW$name\fR.
.ie n .IP "Contentment::Hook\->call($hook, @args)" 4
.el .IP "Contentment::Hook\->call($hook, \f(CW@args\fR)" 4
.IX Item "Contentment::Hook->call($hook, @args)"
Call the hook named \f(CW$hook\fR and pass arguments \f(CW@args\fR. The arguments are optional.
.Sp
Each subroutine registered for the hook is executed in order. The return value of the final hook is returned.
.ie n .IP "Contentment::Hook\->call_named($hook, $name\fR, \f(CW@args)" 4
.el .IP "Contentment::Hook\->call_named($hook, \f(CW$name\fR, \f(CW@args\fR)" 4
.IX Item "Contentment::Hook->call_named($hook, $name, @args)"
Call only handlers for \f(CW$name\fR registered for the hook named \f(CW$hook\fR and pass arguments \f(CW@args\fR. The arguments are optional.
.Sp
Each subroutine registered for the hook is executed in order. The return value of the final hook is returned.
.IP "$iterator = Contentment::Hook\->call_iterator($name)" 4
.IX Item "$iterator = Contentment::Hook->call_iterator($name)"
This returns an object that may be used to iterate through all the hook subroutines manually. This is handy if the hooks are permitted to manipulate arguments, have significant return values, or need to have the output of each fed one into the other, etc. This method is reentrant, so if you want to recursively iterate through hooks, the iterators will not clobber each other.
.Sp
See \*(L"\s-1CALL\s0 \s-1ITERATOR\s0\*(R" for more information.
.RE
.RS 4
.Sh "\s-1CALL\s0 \s-1ITERATOR\s0"
.IX Subsection "CALL ITERATOR"
Using a call iterator (via the \f(CW\*(C`call_iterator\*(C'\fR method), you can run each hook subroutine one at a time.
.Sp
.Vb 5
\&  my $iter = Contentment::Hooks->call_iterator('foo');
\&  while ($iter->next) {
\&          # Pass a handler it's data associated by name
\&          $iter->call($data{$iter->name});
\&  }
.Ve
.ie n .IP "$test = $iter\->next" 4
.el .IP "$test = \f(CW$iter\fR\->next" 4
.IX Item "$test = $iter->next"
Moves the iterator to point to the next hook handler. This method returns a true value if there is another handler to run and false if there are no more.
.IP "$iter\->call(@args)" 4
.IX Item "$iter->call(@args)"
Calls the current handler for the hook with the given arguments. This method returns the value returned by the nested subroutine.
.ie n .IP "$name = $iter\->name" 4
.el .IP "$name = \f(CW$iter\fR\->name" 4
.IX Item "$name = $iter->name"
Returns the name that was associated with the handler according to the \*(L"name\*(R" argument when the handler was registered. Returns \f(CW\*(C`undef\*(C'\fR if no such argument was given.
.ie n .IP "$name = $iter\->order" 4
.el .IP "$name = \f(CW$iter\fR\->order" 4
.IX Item "$name = $iter->order"
Returns the order weight that the handler was registered with. Returns 0 if none was given.
.RE
.RS 4
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Sterling Hanenkamp, <hanenkamp@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Contentment is distributed and licensed under the same terms as Perl itself.
