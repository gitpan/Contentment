.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Contentment::Log 3"
.TH Contentment::Log 3 "2006-01-28" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Contentment::Hooks \- Handles logging for Contentment
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This logger is smart enough to queue up early error messages and allows for multiple logs. This uses the Contentment::Hooks system to actually post the logs. Each log has a hook named "Contentment::Log::\fIlogname\fR".
.PP
This log \s-1API\s0 doesn't really do much on it's own. Hooks must be registered for it to really do anything. You might want to see the information in the Log plugin for Contentment, since it is generally used to setup the actual file logging and such.
.IP "Contentment::Log\->log(\e%args);" 4
.IX Item "Contentment::Log->log(%args);"
This is the most basic log method. All the other methods are just wrappers for this one. 
.Sp
It is normally assumed thet \f(CW%args\fR will be passed via an anonymous reference. Be aware that \f(CW\*(C`log()\*(C'\fR will make changes to the reference passed in, in the interest of speed. Mostly, it will replace the \f(CW\*(C`message\*(C'\fR argument with an interpolated version. However, other changes might occur to (depending on if the code has changed and this documentation has not).
.Sp
This method takes the following arguments:
.RS 4
.IP "name (required)" 4
.IX Item "name (required)"
The name of the log to send the message to. This method will then call the hook named \f(CW"Contentment::Log::$name"\fR.
.IP "message (required)" 4
.IX Item "message (required)"
This is a string that will be passed as the message to the hook handlers. This string may be formatted as for \f(CW\*(C`sprintf\*(C'\fR with the interpolation variables passed in the \*(L"args\*(R" argument. (The reason for offering this kind of interpolation is that I hope to add internationalization at some later point, which will be more easily done this way.)
.IP "args (optional)" 4
.IX Item "args (optional)"
This is a reference to an array of values used to interpolate the \*(L"message\*(R" argument.
.IP "level (optional)" 4
.IX Item "level (optional)"
This argument is specific to the \*(L"error\*(R" log, but is shown here since it's common. This should be one of the following string values:
.RS 4
.IP "\s-1DEBUG\s0" 4
.IX Item "DEBUG"
.PD 0
.IP "\s-1INFO\s0" 4
.IX Item "INFO"
.IP "\s-1WARNING\s0" 4
.IX Item "WARNING"
.IP "\s-1ERROR\s0" 4
.IX Item "ERROR"
.RE
.RS 4
.PD
.Sp
These are just suggestions, but these are the levels currently used by Contentment internally. Additional log levels may be added in the future.
.RE
.IP "would_log (optional)" 4
.IX Item "would_log (optional)"
If this argument is specified and set to a true value, then the handlers registered are not supposed to log anything, but return whether or not they would log anything. The logical disjunction (\s-1OR\s0) of all the results will be returned.
.RE
.RS 4
.Sp
In addition to these arguments, any other named argument may be passed to contain other information.
.Sp
The hook handlers will be passed this reference with the message string interpolated, but otherwise unchanged.
.Sp
This method will returned a logical disjunction (\s-1OR\s0) of all the return values from all the handlers. When the \f(CW\*(C`would_log\*(C'\fR argument is passed with a true value this result will be whether or not any log handler will use the logged information. When the \f(CW\*(C`would_log\*(C'\fR argument is false or not passed, this result will be whether or not any log handler did successfully do something with the log.
.RE
.IP "Contentment::Log\->would_log(\e%args)" 4
.IX Item "Contentment::Log->would_log(%args)"
This method is exactly the same as the \f(CW\*(C`log()\*(C'\fR method with a couple exceptions. First, it makes sure the \f(CW\*(C`would_log\*(C'\fR argument is set to a true value. Second, it does not perform any string interpolation of the given message and args.
.Sp
It can be used as a quick short cut to see if a call to \f(CW\*(C`log()\*(C'\fR will have any affect:
.Sp
.Vb 4
\&  Contentment::Log->would_log(name => 'error', level => 'DEBUG')
\&      && Contentment::Log->debug(
\&             # Some expensive operation
\&         );
.Ve
.Sp
This method will also use the log named \*(L"error\*(R" by default. Therefore, the following is the same as before:
.Sp
.Vb 4
\&  Contentment::Log->would_log(level => 'DEBUG')
\&      && Contentment::Log->debug(
\&             # Some expensive operation
\&         );
.Ve
.IP "Contentment::Log\->debug(@msg, \e@args)" 4
.IX Item "Contentment::Log->debug(@msg, @args)"
This is a shortcut for calling:
.Sp
.Vb 6
\&  Contentment::Log->log(
\&      name    => "error", 
\&          level   => "DEBUG", 
\&          message => join($,, @msg), 
\&          args    => $args,
\&  );
.Ve
.Sp
The \f(CW\*(C`\e@args\*(C'\fR array is optional.
.IP "Contentment::Log\->info(@msg, \e@args)" 4
.IX Item "Contentment::Log->info(@msg, @args)"
This is a shortcut for calling:
.Sp
.Vb 6
\&  Contentment::Log->log(
\&      name    => "error", 
\&          level   => "INFO", 
\&          message => join($,, @msg), 
\&          args    => $args,
\&  );
.Ve
.Sp
The \f(CW\*(C`\e@args\*(C'\fR array is optional.
.IP "Contentment::Log\->warning(@msg, \e@args)" 4
.IX Item "Contentment::Log->warning(@msg, @args)"
This is a shortcut for calling:
.Sp
.Vb 6
\&  Contentment::Log->log(
\&      name    => "error", 
\&          level   => "WARNING", 
\&          message => join($,, @msg), 
\&          args    => $args,
\&  );
.Ve
.Sp
The \f(CW\*(C`\e@args\*(C'\fR array is optional.
.IP "Contentment::Log\->error(@msg, \e@args)" 4
.IX Item "Contentment::Log->error(@msg, @args)"
This is a shortcut for calling:
.Sp
.Vb 6
\&  Contentment::Log->log(
\&      name    => "error", 
\&          level   => "ERROR", 
\&          message => join($,, @msg), 
\&          args    => $args,
\&  );
.Ve
.Sp
The \f(CW\*(C`\e@args\*(C'\fR array is optional.
.Sh "\s-1CUSTOM\s0 \s-1LOG\s0 \s-1HANDLERS\s0"
.IX Subsection "CUSTOM LOG HANDLERS"
If you wish to write a custom log handler. You simply need a method that will accept all the arguments passed to the \f(CW\*(C`log()\*(C'\fR method. The \f(CW\*(C`would_log\*(C'\fR argument must be handled such that a true \f(CW\*(C`would_log\*(C'\fR flag doesn't result in logging, but a check to see whether logging will occur.
.PP
Log handlers don't need to worry about string interpolation. String interpolation is already handled within the \f(CW\*(C`log()\*(C'\fR method.
.Sh "\s-1HOOKS\s0"
.IX Subsection "HOOKS"
.IP "Contentment::Log::\fIlogname\fR" 4
.IX Item "Contentment::Log::logname"
The system provides the ability for multiple logs. If your module needs a special log for something, you may register for any \fIlogname\fR you want and then use the \f(CW\*(C`log()\*(C'\fR method to log there:
.Sp
.Vb 5
\&  Contentment::Log->log({
\&      name => 'my_foo_log',
\&      some_other_custom_foo_arg => 'foo foo FOO!',
\&      message => 'Log to foo, foo!'
\&  });
.Ve
.IP "Contentment::Log::error" 4
.IX Item "Contentment::Log::error"
This is the priamry log hook for the system. The error log has much the same functionality as Apache's \fIerror_log\fR. (Indeed, the default configuration currently sends all of the information logged to this hook to that file when running under Apache.)
.IP "Contentment::Log::access" 4
.IX Item "Contentment::Log::access"
This log is currently not in use, but is planned for use by Contentment. It will be used to record page accesses handled by the system for the creation of statistics.
.Sh "\s-1HOOK\s0 \s-1HANDLERS\s0"
.IX Subsection "HOOK HANDLERS"
.IP "Contentment::Log::default_logger" 4
.IX Item "Contentment::Log::default_logger"
This is the hook hook handler performs a queue-register-reply role prior to any other hooks being registered for the \*(L"Contentment::Log::error\*(R" hook.
.Sp
When the Contentment::Log package is first loaded, this default logger is registered for \*(L"Contentment::Log::error\*(R". This log handler checks to see if any other handler has been registered between log calls. If no handler has been registered, it queues up messages each time it's called. This will continue until another handler is registered for the hook. Once that happens, the default log handler unregisters itself and replays the queued log. This way, no log messages are lost even though most log handlers are going to be added as plugins late in the game.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Sterling Hanenkamp, <hanenkamp@cpan.org>
.SH "COYPRIGHT AND LICENSE"
.IX Header "COYPRIGHT AND LICENSE"
Copyright 2005 Andrew Sterling Hanenkamp. All Rights Reserved.
.PP
Contentment is licensed and distributed under the same terms as Perl itself.
