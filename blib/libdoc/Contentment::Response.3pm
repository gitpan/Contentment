.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Contentment::Response 3"
.TH Contentment::Response 3 "2006-01-28" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Contentment::Response \- Handles Contentment response handling
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the class responsible for outputting the responses to a request. It provides an \s-1API\s0 for manipulating that output, such as specifying additional headers to output, specifying the \s-1MIME\s0 type, status, etc.
.IP "$generator = Contentment::Response\->error($exception)" 4
.IX Item "$generator = Contentment::Response->error($exception)"
.PD 0
.ie n .IP "$generator = Contentment::Response\->error($status, $message\fR, \f(CW$description\fR, \f(CW$detail)" 4
.el .IP "$generator = Contentment::Response\->error($status, \f(CW$message\fR, \f(CW$description\fR, \f(CW$detail\fR)" 4
.IX Item "$generator = Contentment::Response->error($status, $message, $description, $detail)"
.PD
When called, it will use the \*(L"Contentment::Response::error\*(R" hook to attempt to locate a handler capable of handling the error message. The first form simply names an error message, \f(CW$exception\fR, to print. This method will always return a generator object (i.e., if none of the hook handlers return one or there aren't any handlers, the method will create one).
.Sp
The second form allows for more fine grained control. The \f(CW$status\fR is the numeric \s-1HTTP\s0 error code to return and the \f(CW$message\fR is a short named description of the error. The \f(CW$description\fR is a longer descriptive text and \f(CW$detail\fR is debug information that probably ought not be displayed to the user (or not directly).
.Sp
All arguments are optional.
.IP "$generator = Contentment::Response\->redirect($url)" 4
.IX Item "$generator = Contentment::Response->redirect($url)"
.PD 0
.ie n .IP "$generator = Contentment::Response\->redirect($url, %query)" 4
.el .IP "$generator = Contentment::Response\->redirect($url, \f(CW%query\fR)" 4
.IX Item "$generator = Contentment::Response->redirect($url, %query)"
.PD
This method is given a \s-1URL\s0 and will create a generator that returns a temporary redirect to that \s-1URL\s0. The \f(CW$url\fR may either be a \s-1URI\s0 object or a string. The \s-1URL\s0 may be either absolute or relative. If the \s-1URL\s0 is relative, it will be converted to an absolute address using the \f(CW\*(C`base_url()\*(C'\fR method of the current Contentment::Site, thus the address should be relative to the current root path.
.Sp
If you wish, you may also add a set of query variables on the end of the list. These will be appended to the \s-1URL\s0 following a \*(L"?\*(R" and will be formatted and escaped for you.
.IP "$generator = Contentment::Response\->resolve($path)" 4
.IX Item "$generator = Contentment::Response->resolve($path)"
This returns the generator that would be used to give a response for the given path, \f(CW$path\fR. If no \f(CW$path\fR is given, it will default to the \f(CW\*(C`path_info\*(C'\fR of the \s-1CGI\s0 object.
.Sp
This method always returns a generator. If no generator is found using the \*(L"Contentment::Response::resolve\*(R" hook or an error occurs during the process, then the \f(CW\*(C`error\*(C'\fR method is called to return a \*(L"Not Found\*(R" document. You can check for that circumstance as follows:
.Sp
.Vb 6
\&  my $generator = Contentment::Response->resolve($some_path);
\&  if ($generator->get_property('error')) {
\&      # It's an error document
\&  } else {
\&          # It's the document we requested
\&  }
.Ve
.IP "Contentment::Response\->handle_cgi" 4
.IX Item "Contentment::Response->handle_cgi"
This should not be called outside of a Contentment handler method. It returns the completed response.
.IP "$test = Contentment::Response\->header_sent" 4
.IX Item "$test = Contentment::Response->header_sent"
.PD 0
.IP "Contentment::Response\->header_sent($header_sent)" 4
.IX Item "Contentment::Response->header_sent($header_sent)"
.PD
Returns a true value if the headers were already printed as part of the request. Set to a true value if you send headers. Once set to true, it cannot be set back to false.
.IP "$header = Contentment::Response\->header" 4
.IX Item "$header = Contentment::Response->header"
Returns a reference to a hash to store header information in. This hash will be passed to the \s-1CGI\s0 \f(CW\*(C`header\*(C'\fR function.
.IP "$top_kind = Contentment::Response\->top_kind" 4
.IX Item "$top_kind = Contentment::Response->top_kind"
.PD 0
.IP "Contentment::Response\->top_kind($kind)" 4
.IX Item "Contentment::Response->top_kind($kind)"
.PD
Used to reflect the current file kind of the top level response. This should be initially set during content generation by a call to the \f(CW\*(C`generated_kind\*(C'\fR method of the file type plugin generating the output. It, then, may be modified further by later filters. It starts with an initial value of the empty string \f(CW""\fR.
.IP "$generator = Contentment::Response\->generator" 4
.IX Item "$generator = Contentment::Response->generator"
This is used to fetch the top-most generator for the request.
.Sh "\s-1HOOKS\s0"
.IX Subsection "HOOKS"
.IP "Contentment::Resposne::begin" 4
.IX Item "Contentment::Resposne::begin"
Handlers of this hook can expect no arguments, but their output will be captured and passed on to the generator. It runs right before generator.
.IP "Contentment::Response:end" 4
.IX Item "Contentment::Response:end"
Handlers of this hook can expect the input from the generated output or the previous handler's output. The output will be captured for output to the client.
.IP "Contentment::Response::resolve" 4
.IX Item "Contentment::Response::resolve"
These handlers take a path argument and should ultimately result in in a generator object (see Contentment::Generator). The result of the previous handler is passed as the argument to the next.
.IP "Contentment::Response::error" 4
.IX Item "Contentment::Response::error"
These handlers take the four arguments that the \f(CW\*(C`error\*(C'\fR method accepts and should return either \f(CW\*(C`undef\*(C'\fR or a generator object (see Contentment::Generator) capable of returning an error page.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Sterling Hanenkamp, <hanenkamp@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 Andrew Sterling Hanenkamp. All Rights Reserved.
.PP
Contentment is distributed and licensed under the same terms as Perl itself.
