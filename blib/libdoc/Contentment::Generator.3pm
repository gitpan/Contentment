.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Contentment::Generator 3"
.TH Contentment::Generator 3 "2006-01-28" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Contentment::Generator \- Provides the contract and factory for generators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  my $generator = Contentment::Generator->generator('Plain', {
\&      source     => sub {
\&          print "Hello World!\en";
\&      },
\&      kind       => 'text/plain',
\&      properties => {
\&          title       => 'Generic Generator',
\&          description => 'This is a very simple example.',
\&      },
\&  });
.Ve
.PP
.Vb 1
\&  $generator->generate( foo => 1, bar => 2 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
At the center of each response is the generator. A generator is responsible for sending a response to the user and must implement a few methods. This class provides a generic way for constructing generators.
.Sh "\s-1GENERATOR\s0 \s-1INTERFACE\s0"
.IX Subsection "GENERATOR INTERFACE"
This is the list of methods that a generator class must implement and the expected parameters, output, and return values. 
.ie n .IP "my $generator\->new(\e%args)" 4
.el .IP "my \f(CW$generator\fR\->new(\e%args)" 4
.IX Item "my $generator->new(%args)"
Users should not call generator constructors directly. Rather, \f(CW$generator\fR objects should be constructed via the factory method, \f(CW\*(C`generator\*(C'\fR, provided by Contentment::Generator (this class).
.Sp
The arguments can be anything appropriate to the generator class. However, here a few recommendations:
.RS 4
.IP "source" 4
.IX Item "source"
Many generators take some source text and use that as the basis for executing some code, finding properties, etc. The source should be accepted as a scalar. You may also wish to accept other forms like file handles.
.IP "properties" 4
.IX Item "properties"
Many generators will take a list of properties to associate with the generator. If your generator creates properties from the source, it is recommended that the properties associated with this option be used as default values. Any properties found in the file should append to or override the properties stated here.
.RE
.RS 4
.RE
.ie n .IP "my $value\fR = \f(CW$generator\->get_property($key)" 4
.el .IP "my \f(CW$value\fR = \f(CW$generator\fR\->get_property($key)" 4
.IX Item "my $value = $generator->get_property($key)"
This method must exist and returns whatever information is appropriate. For generators based on files, it might return information for keys naming values returned from the \f(CW\*(C`stat\*(C'\fR operator. This is anything you want.
.Sp
This should, in general, include the following properties for each generator:
.RS 4
.IP "kind" 4
.IX Item "kind"
This is the kind of data the \f(CW\*(C`generate()\*(C'\fR method will output.
.IP "title" 4
.IX Item "title"
This is the title of the document generated by this generator.
.IP "description" 4
.IX Item "description"
This is a short one line description of the document generated by this generator.
.RE
.RS 4
.RE
.ie n .IP "$result = $generator\->generate(%args)" 4
.el .IP "$result = \f(CW$generator\fR\->generate(%args)" 4
.IX Item "$result = $generator->generate(%args)"
This method should print to \s-1STDOUT\s0 the output of the generator. It may return whatever result seems appropriate (it will be ignored if it's run as the top-level response).
.Sh "\s-1FACTORY\s0"
.IX Subsection "FACTORY"
.IP "$generator = Contentment::Generator\->generator($class, \e%args)" 4
.IX Item "$generator = Contentment::Generator->generator($class, %args)"
This factory method will create the requested generator. If the given class name, \f(CW$class\fR, does not contain \*(L"::\*(R", it will be considered a short name and will have the string \*(L"Contentment::Generator::\*(R" prepended to it to find the generator class.
.Sp
The arguments should be those necessary to initialize the generator.
.IP "$content = Contentment::Generator\->content_of($generator, \e%args)" 4
.IX Item "$content = Contentment::Generator->content_of($generator, %args)"
This is a helper to stringify the generation of a generator in case you need to just capture the string output instead of printing that output immediately. This is very useful for calling generators from the Template Toolkit generator:
.Sp
.Vb 2
\&  [% USE Generator %]
\&  [% Generator.content_of(arg.gen, foo = 1 bar = 2) %]
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Sterling Hanenkamp, <hanenkamp@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2005 Andrew Sterling Hanenkamp. All Rights Reserved.
.PP
Contentment is licensed and distributed under the same terms as Perl itself.
