.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Contentment::Request 3"
.TH Contentment::Request 3 "2006-01-28" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Contentment::Request \- Class responsible for managing incoming requests
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class consumes an \s-1HTTP\s0 request and then presents the current request through the interface provided. Contentment is meant to target different web platforms (\s-1CGI\s0, FastCGI, libwww\-perl, mod_perl, etc.). Each of these present a different \s-1API\s0 for accessing the \s-1HTTP\s0 request information. This interface tries to simplify things by presenting a uniform request interface for all.
.PP
Rather than re-invent yet another interface to add to the list above, we'd rather just use an existing object. We use \s-1CGI\s0 to present this interface. It's not ideal because it also presents a lot of response functionality that should be found in Contentment::Response. However, it is the only interface that is both popular and works uniformly with nearly any target platform with very little effort. This also gives you additional functionality, such as \s-1HTML\s0 code generation, fill-in form generation, and some other tools that might also be useful in your code. However, the returning of response information is the job of Contentment::Response, so these features of \s-1CGI\s0 will remain unused (though, Contentment::Response probably uses them internally as they are quite handy).
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "$query = Contentment::Request\->cgi" 4
.IX Item "$query = Contentment::Request->cgi"
Retrieves a copy of the \s-1CGI\s0 object or undef if the request hasn't be initialized yet.
.IP "$kind = Contentment::Request\->final_kind" 4
.IX Item "$kind = Contentment::Request->final_kind"
This method may be called to ask what kind of file the request wants returned. This involves calling the \*(L"Contentment::Request::final_kind\*(R" hook. The hook will be called at most once per request and the result will be cached here if this method is called more than once. If no handlers are set or none of the called handlers can identify the final kind, then the empty string (\f(CW""\fR) will be returned.
.IP "Contentment::Request\->begin_cgi" 4
.IX Item "Contentment::Request->begin_cgi"
This shouldn't be called outside of a Contentment handler method. It tells the handler to load the request from standard input and the environment.
.Sp
This calls the \f(CW\*(C`Contentment::Request::begin\*(C'\fR hook.
.IP "Contemtent::Request\->end_cgi" 4
.IX Item "Contemtent::Request->end_cgi"
This shouldn't be called outside of a Contentment handler method. It calls the \f(CW\*(C`Contentment::Request::end\*(C'\fR hook.
.IP "Contentment::Request\->begin_fast_cgi" 4
.IX Item "Contentment::Request->begin_fast_cgi"
This shouldn't be called outside of a Contentment handler method. It tells the handler to the load the FastCGI request.
.Sp
This calls the \f(CW\*(C`Contentment::Request::begin\*(C'\fR hook.
.IP "Contentment::Request\->end_fast_cgi" 4
.IX Item "Contentment::Request->end_fast_cgi"
This shouldn't be called outside of a Contentment handler method. It calls the \f(CW\*(C`Contentment::Request::end\*(C'\fR hook.
.Sh "\s-1HOOKS\s0"
.IX Subsection "HOOKS"
.IP "Contentment::Request::begin" 4
.IX Item "Contentment::Request::begin"
These handlers are passed a single argument. This will be a copy of the just initialized \s-1CGI\s0 object.
.IP "Contentment::Request::end" 4
.IX Item "Contentment::Request::end"
These handlers are passed a single argument. This will be a copy of the \s-1CGI\s0 object for the request.
.IP "Contentment::Request::final_kind" 4
.IX Item "Contentment::Request::final_kind"
These handlers are passed a single argument. This will be a copy of the \s-1CGI\s0 object for the request. These handlers should try to identify the kind of file the request wants rendered. The file \*(L"kind\*(R" is a bit of a nebulous idea, but is often a \s-1MIME\s0 Type or something similar and can be used by various plugins to figure out how to render the page. The first handler that returns a value other than \f(CW\*(C`undef\*(C'\fR forms the result of the hook. The rest of the handlers will not be called.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andrew Sterling Hanenkamp, <hanenkamp@cpan.org>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2005 Andrew Sterling Hanenkamp. All Rights Reserved.
.PP
Contentment is licensed and distributed under the same terms as Perl itself.
